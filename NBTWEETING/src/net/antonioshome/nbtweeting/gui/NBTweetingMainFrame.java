/* (C) 2011, 2012 Antonio Vieiro (antonio@antonioshome.net). All rights reserved. */
package net.antonioshome.nbtweeting.gui;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ListSelectionModel;
import net.antonioshome.nbtweeting.entities.Query;
import net.antonioshome.nbtweeting.entities.abilities.HasTextContent;
import net.antonioshome.nbtweeting.nodes.QueryNode;
import net.antonioshome.nbtweeting.nodes.TweetNode;
import net.antonioshome.nbtweeting.nodes.abilities.ReloadableNode;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.propertysheet.PropertySheetView;
import org.openide.explorer.view.BeanTreeView;
import org.openide.explorer.view.ListView;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

/**
 * NBTweetingMainFrame is a plain JFrame that uses different NetBeans
 * components.
 * This class is a ExplorerManager.Provider, so all panels embeded within it
 * (that are not in turn ExplorerManager.Providers, will use this frame's
 * ExplorerManager as the object containing the main nodes.
 * @author Antonio Vieiro (antonio@antonioshome.net)
 */
public class NBTweetingMainFrame extends javax.swing.JFrame
  implements ExplorerManager.Provider {

  private ExplorerManager explorerManager = new ExplorerManager();
  private OutlineView outlineView;
  private ListView listView;
  private BeanTreeView beanTreeView;
  private PropertySheet propertySheetView;

  /** 
   * Creates new form NBTweetingMainFrame 
   */
  public NBTweetingMainFrame() {
    initComponents();
    // This frame has an ExplorerManager, that all embedded
    // JPanels (which are not themselves ExplorerManager.Providers) will use 
    explorerManager = new ExplorerManager();
    // Create an OutlineView with some properties and add it to this window.
    outlineView = new OutlineView();
    outlineView.getOutline().setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
    outlineView.setPropertyColumns(TweetNode.DATE_PROPERTY, "Tweet date", TweetNode.AUTHOR_PROPERTY, "Author");
    pnlOutlineViewContainer.add(outlineView, BorderLayout.CENTER);
    // Create a ListView and add it to this window
    listView = new ListView();
    listView.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
    pnlListViewContainer.add(listView, BorderLayout.CENTER);
    // Add a BeanTreeView
    beanTreeView = new BeanTreeView();
    beanTreeView.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
    pnlBeanTreeViewContainer.add(beanTreeView, BorderLayout.CENTER);
    // Create a PropertySheetView and add it to this window
    propertySheetView = new PropertySheetView();
    pnlPropertySheetContainer.add(propertySheetView, BorderLayout.CENTER);
    // Default size and location of the window
    setSize(800, 600);
    setLocationRelativeTo(null);
    // Add a PropertyChangeLister to detect selection 
    explorerManager.addPropertyChangeListener(new PropertyChangeListener()    {

      public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
          setSelectedNodes(explorerManager.getSelectedNodes());
        }
      }
    });
  }

  /**
   * This method will be invoked whenever a node is selected in the ExplorerManager.
   * @param selectedNodes An array with the selected nodes.
   */
  private void setSelectedNodes(Node[] selectedNodes) {

    if (selectedNodes == null || selectedNodes.length == 0) {
      txtTweet.setText("");
    } else {
      Node firstSelectedNode = selectedNodes[0];
      // If the node "HasTextContent" then add the text content to the TextArea
      HasTextContent ctc = firstSelectedNode.getLookup().lookup(HasTextContent.class);
      if (ctc != null) {
        txtTweet.setText(ctc.getText());
      } else {
        txtTweet.setText("No text content");
      }
      // If the node is a "ReloadableNode" then enable the cmdReload button, disable otherwise
      ReloadableNode rn = selectedNodes[0].getLookup().lookup(ReloadableNode.class);
      cmdReload.setEnabled(rn != null);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    txtSearchTerm = new javax.swing.JTextField();
    cmdSearch = new javax.swing.JButton();
    cmdReload = new javax.swing.JButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    leftPanel = new javax.swing.JTabbedPane();
    pnlOutlineViewContainer = new javax.swing.JPanel();
    pnlListViewContainer = new javax.swing.JPanel();
    pnlBeanTreeViewContainer = new javax.swing.JPanel();
    rightPanel = new javax.swing.JPanel();
    jSplitPane2 = new javax.swing.JSplitPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    txtTweet = new javax.swing.JTextArea();
    pnlPropertySheetContainer = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.title")); // NOI18N
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel1.setText(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.jLabel1.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
    jPanel1.add(jLabel1, gridBagConstraints);

    txtSearchTerm.setText(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.txtSearchTerm.text")); // NOI18N
    txtSearchTerm.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtSearchTermActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
    gridBagConstraints.weightx = 100.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
    jPanel1.add(txtSearchTerm, gridBagConstraints);

    cmdSearch.setText(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.cmdSearch.text")); // NOI18N
    cmdSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmdSearchActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
    jPanel1.add(cmdSearch, gridBagConstraints);

    cmdReload.setText(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.cmdReload.text")); // NOI18N
    cmdReload.setEnabled(false);
    cmdReload.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmdReloadActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
    jPanel1.add(cmdReload, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 100.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
    getContentPane().add(jPanel1, gridBagConstraints);

    jSplitPane1.setDividerLocation(500);

    pnlOutlineViewContainer.setLayout(new java.awt.BorderLayout());
    leftPanel.addTab(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.pnlOutlineViewContainer.TabConstraints.tabTitle"), pnlOutlineViewContainer); // NOI18N

    pnlListViewContainer.setLayout(new java.awt.BorderLayout());
    leftPanel.addTab(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.pnlListViewContainer.TabConstraints.tabTitle"), pnlListViewContainer); // NOI18N

    pnlBeanTreeViewContainer.setLayout(new java.awt.BorderLayout());
    leftPanel.addTab(org.openide.util.NbBundle.getMessage(NBTweetingMainFrame.class, "NBTweetingMainFrame.pnlBeanTreeViewContainer.TabConstraints.tabTitle"), pnlBeanTreeViewContainer); // NOI18N

    jSplitPane1.setLeftComponent(leftPanel);

    rightPanel.setLayout(new java.awt.BorderLayout());

    jSplitPane2.setDividerLocation(200);
    jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    jScrollPane1.setBorder(null);

    txtTweet.setColumns(20);
    txtTweet.setEditable(false);
    txtTweet.setFont(new java.awt.Font("Monospaced", 0, 12));
    txtTweet.setLineWrap(true);
    txtTweet.setRows(3);
    txtTweet.setTabSize(2);
    jScrollPane1.setViewportView(txtTweet);

    jSplitPane2.setTopComponent(jScrollPane1);

    pnlPropertySheetContainer.setLayout(new java.awt.BorderLayout());
    jSplitPane2.setBottomComponent(pnlPropertySheetContainer);

    rightPanel.add(jSplitPane2, java.awt.BorderLayout.CENTER);

    jSplitPane1.setRightComponent(rightPanel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 100.0;
    gridBagConstraints.weighty = 100.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
    getContentPane().add(jSplitPane1, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed

      // To perform a query we create a query entity...
      Query query = new Query();
      // ... set its keyword
      query.setKeyword(txtSearchTerm.getText());
      // Create a node from the query...
      QueryNode node = new QueryNode(query);
      // ... and set this explorer's manager root node to it
      explorerManager.setRootContext(node);

    }//GEN-LAST:event_cmdSearchActionPerformed

    private void txtSearchTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchTermActionPerformed

      // To perform a query we create a query entity...
      Query query = new Query();
      // ... set its keyword
      query.setKeyword(txtSearchTerm.getText());
      // Create a node from the query...
      QueryNode node = new QueryNode(query);
      // ... and set this explorer's manager root node to it
      explorerManager.setRootContext(node);

    }//GEN-LAST:event_txtSearchTermActionPerformed

    private void cmdReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReloadActionPerformed

      Node[] nodes = explorerManager.getSelectedNodes();

      if (nodes != null && nodes.length > 0) {
        // See if this node is a ReloadableNode...
        ReloadableNode reloadableNode = nodes[0].getLookup().lookup(ReloadableNode.class);
        if (reloadableNode != null) {
          try {
            // ... and if it is then reload its children
            // since the children are a ChildFactory this will be done in
            // a background thread
            reloadableNode.reloadChildren();
          } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
          }
        }
      }
      
    }//GEN-LAST:event_cmdReloadActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable()     {

      public void run() {
        new NBTweetingMainFrame().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cmdReload;
  private javax.swing.JButton cmdSearch;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JTabbedPane leftPanel;
  private javax.swing.JPanel pnlBeanTreeViewContainer;
  private javax.swing.JPanel pnlListViewContainer;
  private javax.swing.JPanel pnlOutlineViewContainer;
  private javax.swing.JPanel pnlPropertySheetContainer;
  private javax.swing.JPanel rightPanel;
  private javax.swing.JTextField txtSearchTerm;
  private javax.swing.JTextArea txtTweet;
  // End of variables declaration//GEN-END:variables

  public ExplorerManager getExplorerManager() {
    return explorerManager;
  }
}
/*
Copyright 2011-2012 Antonio Vieiro-Varela. ALl rights reserved.

Oracle and Java are registered trademarks of Oracle and/or its affiliates.
Other names may be trademarks of their respective owners.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Antonio designates this
particular file as subject to the "Classpath" exception as provided
by Antonio in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NBTWEETING. The Initial Developer of the Original
Software is Antonio Vieiro.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
*/